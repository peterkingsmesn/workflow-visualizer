# üõ°Ô∏è Î≥¥Ïïà Ïä§Ï∫î ÏõåÌÅ¨ÌîåÎ°úÏö∞
name: Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Îß§Ï£º ÏõîÏöîÏùº 02:00 UTCÏóê Ïã§Ìñâ
    - cron: '0 2 * * 1'
  workflow_dispatch:

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    name: Dependency Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > audit-report.json || true
        npm audit --audit-level=moderate
        
    - name: Install desktop dependencies
      run: |
        cd desktop
        npm ci
        
    - name: Run desktop npm audit
      run: |
        cd desktop
        npm audit --audit-level=moderate --json > ../desktop-audit-report.json || true
        npm audit --audit-level=moderate
        
    - name: Upload audit reports
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-reports
        path: |
          audit-report.json
          desktop-audit-report.json
        retention-days: 30

  code-scan:
    runs-on: ubuntu-latest
    name: Code Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript-typescript
        queries: +security-and-quality
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript-typescript"

  license-check:
    runs-on: ubuntu-latest
    name: License Compliance Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Install dependencies
      run: npm ci
      
    - name: Check main project licenses
      run: |
        echo "## Main Project License Report" > license-report.md
        license-checker --summary --markdown >> license-report.md
        echo "" >> license-report.md
        
    - name: Install desktop dependencies
      run: |
        cd desktop
        npm ci
        
    - name: Check desktop project licenses
      run: |
        cd desktop
        echo "## Desktop Project License Report" >> ../license-report.md
        license-checker --summary --markdown >> ../license-report.md
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-report
        path: license-report.md
        retention-days: 30

  secret-scan:
    runs-on: ubuntu-latest
    name: Secret Detection Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  docker-scan:
    runs-on: ubuntu-latest
    name: Docker Security Scan
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Electron base image
      run: |
        cat > Dockerfile.electron << 'EOF'
        FROM electronuserland/builder:18-wine
        WORKDIR /app
        COPY package*.json ./
        RUN npm ci
        COPY . .
        RUN npm run build
        EOF
        
        docker build -f Dockerfile.electron -t workflow-visualizer:electron .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'workflow-visualizer:electron'
        format: 'sarif'
        output: 'docker-scan-results.sarif'
        
    - name: Upload Docker scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'docker-scan-results.sarif'

  security-report:
    needs: [dependency-scan, code-scan, license-check, secret-scan]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Generate security summary
      run: |
        echo "# üõ°Ô∏è Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "**Scan Date:** $(date -u)" >> security-summary.md
        echo "**Repository:** ${{ github.repository }}" >> security-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "**Commit:** ${{ github.sha }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## üìä Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Dependency scan results
        if [ -f "security-audit-reports/audit-report.json" ]; then
          VULNERABILITIES=$(jq '.metadata.vulnerabilities | to_entries | map(.value) | add' security-audit-reports/audit-report.json 2>/dev/null || echo "0")
          echo "- **Dependency Vulnerabilities (Main):** $VULNERABILITIES" >> security-summary.md
        fi
        
        if [ -f "security-audit-reports/desktop-audit-report.json" ]; then
          DESKTOP_VULNERABILITIES=$(jq '.metadata.vulnerabilities | to_entries | map(.value) | add' security-audit-reports/desktop-audit-report.json 2>/dev/null || echo "0")
          echo "- **Dependency Vulnerabilities (Desktop):** $DESKTOP_VULNERABILITIES" >> security-summary.md
        fi
        
        echo "- **Code Analysis:** ${{ needs.code-scan.result }}" >> security-summary.md
        echo "- **License Check:** ${{ needs.license-check.result }}" >> security-summary.md
        echo "- **Secret Scan:** ${{ needs.secret-scan.result }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## üîß Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. **Ï†ïÍ∏∞Ï†ÅÏù∏ ÏùòÏ°¥ÏÑ± ÏóÖÎç∞Ïù¥Ìä∏**: Ïõî 1Ìöå Ïù¥ÏÉÅ" >> security-summary.md
        echo "2. **Î≥¥Ïïà Ìå®Ïπò Ï†ÅÏö©**: Ï¶âÏãú Ï†ÅÏö©" >> security-summary.md
        echo "3. **ÏΩîÎìú Î¶¨Î∑∞**: Î™®Îì† PRÏóê ÎåÄÌï¥ Î≥¥Ïïà Í¥ÄÏ†ê Í≤ÄÌÜ†" >> security-summary.md
        echo "4. **ÎùºÏù¥ÏÑºÏä§ Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§**: ÏÉÅÏö© ÎùºÏù¥ÏÑºÏä§ Ï∂©Îèå Î∞©ÏßÄ" >> security-summary.md
        echo "5. **ÏãúÌÅ¨Î¶ø Í¥ÄÎ¶¨**: ÌôòÍ≤Ω Î≥ÄÏàò Î∞è GitHub Secrets ÏÇ¨Ïö©" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## üìã Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "- [ ] Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†ê ÏàòÏ†ï" >> security-summary.md
        echo "- [ ] ÎùºÏù¥ÏÑºÏä§ Ïª¥ÌîåÎùºÏù¥Ïñ∏Ïä§ ÌôïÏù∏" >> security-summary.md
        echo "- [ ] Î≥¥Ïïà Ï†ïÏ±Ö Î¨∏ÏÑúÌôî" >> security-summary.md
        echo "- [ ] ÌåÄ Î≥¥Ïïà ÍµêÏú° Ïã§Ïãú" >> security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('security-summary.md')) {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }

  notify-security-team:
    needs: [dependency-scan, code-scan, secret-scan]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify security team
      run: |
        echo "üö® Security scan failed on main branch"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow: ${{ github.workflow }}"
        
        # Discord/Slack ÏïåÎ¶º (ÏõπÌõÖ URLÏù¥ ÏÑ§Ï†ïÎêú Í≤ΩÏö∞)
        if [ -n "${{ secrets.SECURITY_WEBHOOK_URL }}" ]; then
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "content": "üö® **Security Alert**\n\nWorkflow Visualizer Î≥¥Ïïà Ïä§Ï∫î Ïã§Ìå®\n- Repository: ${{ github.repository }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}\n- Workflow: ${{ github.run_id }}"
               }' \
               "${{ secrets.SECURITY_WEBHOOK_URL }}"
        fi