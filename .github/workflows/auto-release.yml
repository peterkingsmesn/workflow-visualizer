# 🚀 자동 릴리스 워크플로우
name: Auto Release

on:
  # 매일 자정에 자동 릴리스 체크
  schedule:
    - cron: '0 0 * * *'
  # 수동 트리거
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.changes.outputs.has_changes }}
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check for changes since last release
      id: changes
      run: |
        # 마지막 릴리스 태그 가져오기
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Last tag: $LAST_TAG"
        
        # 마지막 릴리스 이후 커밋 수 확인
        COMMITS_SINCE=$(git rev-list ${LAST_TAG}..HEAD --count)
        echo "Commits since last release: $COMMITS_SINCE"
        
        if [ "$COMMITS_SINCE" -gt 0 ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup Node.js
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Calculate new version
      if: steps.changes.outputs.has_changes == 'true'
      id: version
      run: |
        # package.json에서 현재 버전 읽기
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # 버전 타입 결정
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
        
        # 새 버전 계산
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Update version
      run: |
        NEW_VERSION="${{ needs.check-changes.outputs.new_version }}"
        npm version $NEW_VERSION --no-git-tag-version
        cd desktop && npm version $NEW_VERSION --no-git-tag-version
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Install desktop dependencies
      run: |
        cd desktop
        npm ci
        
    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd desktop
        npm run build:windows
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build macOS
      if: matrix.os == 'macos-latest'
      run: |
        cd desktop
        npm run build:mac
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd desktop
        npm run build:linux
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build
        path: desktop/dist/*
        retention-days: 30

  create-release:
    needs: [check-changes, build-and-release]
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.has_changes == 'true' && (github.event.inputs.create_release != 'false')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Organize artifacts
      run: |
        mkdir -p release
        
        # Windows 파일들
        find artifacts/windows-latest-build -name "*.exe" -exec cp {} release/ \;
        find artifacts/windows-latest-build -name "*.nsis.7z" -exec cp {} release/ \; 2>/dev/null || true
        
        # macOS 파일들
        find artifacts/macos-latest-build -name "*.dmg" -exec cp {} release/ \;
        
        # Linux 파일들
        find artifacts/ubuntu-latest-build -name "*.AppImage" -exec cp {} release/ \;
        
        echo "Release files:"
        ls -la release/
        
    - name: Generate changelog
      id: changelog
      run: |
        NEW_VERSION="${{ needs.check-changes.outputs.new_version }}"
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        echo "## 🚀 Workflow Visualizer v$NEW_VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 새로운 기능 및 개선사항" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # 마지막 릴리스 이후의 커밋 메시지들
        git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges >> CHANGELOG.md
        
        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📥 다운로드" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Windows**: \`.exe\` 파일 다운로드" >> CHANGELOG.md
        echo "- **macOS**: \`.dmg\` 파일 다운로드" >> CHANGELOG.md
        echo "- **Linux**: \`.AppImage\` 파일 다운로드" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🔑 라이센스 활성화" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "1. [Gumroad에서 월 \$9.9 구독](https://halowf.com/pricing)" >> CHANGELOG.md
        echo "2. 이메일로 받은 라이센스 키 입력" >> CHANGELOG.md
        echo "3. 모든 고급 기능 활성화!" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 💰 포함 기능" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- ✅ 무제한 프로젝트 분석" >> CHANGELOG.md
        echo "- ✅ 무제한 파일 크기" >> CHANGELOG.md
        echo "- ✅ 모든 AI 분석 기능" >> CHANGELOG.md
        echo "- ✅ 로컬 설치 및 사용" >> CHANGELOG.md
        echo "- ✅ 업데이트 및 기술 지원" >> CHANGELOG.md
        echo "- ✅ 5개 언어 지원 (한국어, 영어, 일본어, 중국어, 스페인어)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📋 시스템 요구사항" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Windows**: 10/11 (64-bit)" >> CHANGELOG.md
        echo "- **macOS**: 10.15 이상 (Intel/Apple Silicon)" >> CHANGELOG.md
        echo "- **Linux**: Ubuntu 18.04+ 또는 호환 배포판" >> CHANGELOG.md
        echo "- **RAM**: 최소 4GB 권장" >> CHANGELOG.md
        echo "- **저장공간**: 1GB 이상" >> CHANGELOG.md
        
        # 변경로그를 출력 변수로 설정
        CHANGELOG_CONTENT=$(cat CHANGELOG.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Git tag
      run: |
        NEW_VERSION="v${{ needs.check-changes.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ needs.check-changes.outputs.new_version }}"
        name: "Workflow Visualizer v${{ needs.check-changes.outputs.new_version }}"
        body: ${{ steps.changelog.outputs.changelog }}
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Notify Discord (Optional)
      if: env.DISCORD_WEBHOOK_URL
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d '{
               "content": "🚀 **새 릴리스 출시!**\n\n**Workflow Visualizer v${{ needs.check-changes.outputs.new_version }}**\n\n📥 다운로드: https://github.com/peterkingsmesn/workflow-visualizer/releases/latest\n💰 구독: https://halowf.com/pricing"
             }' \
             ${{ env.DISCORD_WEBHOOK_URL }}
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  update-download-links:
    needs: [check-changes, create-release]
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.has_changes == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Update download page
      run: |
        NEW_VERSION="v${{ needs.check-changes.outputs.new_version }}"
        
        # DownloadSection.tsx 업데이트
        sed -i "s/releases\/latest/releases\/tag\/$NEW_VERSION/g" src/components/landing/DownloadSection.tsx
        
        # README.md 업데이트 (있다면)
        if [ -f README.md ]; then
          sed -i "s/releases\/latest/releases\/tag\/$NEW_VERSION/g" README.md
        fi
        
    - name: Commit and push updates
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "docs: update download links to v${{ needs.check-changes.outputs.new_version }}" || exit 0
        git push