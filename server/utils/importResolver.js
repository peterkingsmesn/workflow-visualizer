const path = require('path');
const fs = require('fs');

/**
 * Import Í≤ΩÎ°úÎ•º Ìï¥ÏÑùÌïòÏó¨ Ï†ïÍ∑úÌôîÎêú Í≤ΩÎ°úÎ•º Î∞òÌôò
 * @param {string} sourcePath - ÏÜåÏä§ ÌååÏùº Í≤ΩÎ°ú
 * @param {string} importPath - import Í≤ΩÎ°ú
 * @returns {string} Ï†ïÍ∑úÌôîÎêú Í≤ΩÎ°ú
 */
function resolveImportPath(sourcePath, importPath) {
  // Ï†ïÍ∑úÌôîÎêú Í≤ΩÎ°ú ÏÉùÏÑ±
  const sourceDir = path.dirname(sourcePath);
  const resolved = path.resolve(sourceDir, importPath);
  
  // Windows Í≤ΩÎ°úÎ•º Unix Ïä§ÌÉÄÏùºÎ°ú Î≥ÄÌôò
  return resolved.replace(/\\/g, '/');
}

/**
 * ÌååÏùº ÏãúÏä§ÌÖú Í∏∞Î∞ò import Í≤ΩÎ°ú Ìï¥ÏÑù (ÌôïÏû•Ïûê Ï∂îÍ∞Ä)
 * @param {string} importPath - import Í≤ΩÎ°ú
 * @param {string} fromFile - ÏÜåÏä§ ÌååÏùº
 * @returns {string|null} Ìï¥ÏÑùÎêú Í≤ΩÎ°ú ÎòêÎäî null
 */
function resolveImportPathWithFS(importPath, fromFile) {
  if (importPath.startsWith('.')) {
    const dir = path.dirname(fromFile);
    let resolved = path.resolve(dir, importPath);
    
    // ÌôïÏû•Ïûê Ï∂îÍ∞Ä ÏãúÎèÑ
    const extensions = ['.js', '.jsx', '.ts', '.tsx', '.json'];
    for (const ext of extensions) {
      if (fs.existsSync(resolved + ext)) {
        return resolved + ext;
      }
    }
    
    // index ÌååÏùº ÌôïÏù∏
    const indexPath = path.join(resolved, 'index');
    for (const ext of extensions) {
      if (fs.existsSync(indexPath + ext)) {
        return indexPath + ext;
      }
    }
  }
  
  return null;
}

/**
 * ÌÉÄÍ≤ü ÌååÏùº Ï∞æÍ∏∞
 * @param {Array} files - ÌååÏùº Î™©Î°ù
 * @param {string} resolvedPath - Ìï¥ÏÑùÎêú Í≤ΩÎ°ú
 * @returns {Object|null} Ï∞æÏùÄ ÌååÏùº ÎòêÎäî null
 */
function findTargetFile(files, resolvedPath) {
  console.log(`üîç Looking for target file: ${resolvedPath}`);
  
  if (!resolvedPath) {
    console.log(`‚ö†Ô∏è Resolved path is null`);
    return null;
  }
  
  // Í∞ÄÎä•Ìïú ÌôïÏû•ÏûêÎì§
  const extensions = ['.js', '.jsx', '.ts', '.tsx', '.json'];
  
  // Ï†ïÌôïÌïú Í≤ΩÎ°ú Îß§Ïπò
  let targetFile = files.find(f => f.path === resolvedPath);
  if (targetFile) {
    console.log(`‚úÖ Found exact match: ${targetFile.path}`);
    return targetFile;
  }
  
  // ÌôïÏû•Ïûê Ï∂îÍ∞ÄÌï¥ÏÑú Ï∞æÍ∏∞
  for (const ext of extensions) {
    targetFile = files.find(f => f.path === resolvedPath + ext);
    if (targetFile) {
      console.log(`‚úÖ Found with extension: ${targetFile.path}`);
      return targetFile;
    }
  }
  
  // index ÌååÏùº Ï∞æÍ∏∞
  for (const ext of extensions) {
    targetFile = files.find(f => f.path === resolvedPath + '/index' + ext);
    if (targetFile) {
      console.log(`‚úÖ Found index file: ${targetFile.path}`);
      return targetFile;
    }
  }
  
  // Îçî Ïú†Ïó∞Ìïú Îß§Ïπ≠ - ÌååÏùºÎ™ÖÎßåÏúºÎ°úÎèÑ Ï∞æÍ∏∞
  const fileName = resolvedPath.split('/').pop();
  for (const ext of extensions) {
    targetFile = files.find(f => {
      const fName = f.path.split('/').pop();
      return fName === fileName + ext || fName === fileName;
    });
    if (targetFile) {
      console.log(`‚úÖ Found by filename: ${targetFile.path}`);
      return targetFile;
    }
  }
  
  console.log(`‚ùå Target file not found for: ${resolvedPath}`);
  return null;
}

module.exports = {
  resolveImportPath,
  resolveImportPathWithFS,
  findTargetFile
};