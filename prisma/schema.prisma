// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String?   // null for OAuth users
  name              String?
  avatar            String?
  provider          String?   // google, github, email
  providerId        String?   // OAuth provider user ID
  emailVerified     Boolean   @default(false)
  emailVerifyToken  String?   @unique
  passwordResetToken String?  @unique
  passwordResetExpires DateTime?
  role              Role      @default(USER)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  locale            String    @default("en")
  timezone          String    @default("UTC")
  marketingEmails   Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  sessions          Session[]
  projects          Project[]
  teamMembers       TeamMember[]
  subscription      Subscription?
  activityLogs      ActivityLog[]
  notifications     Notification[]
  apiKeys           ApiKey[]
  licenseKeys       LicenseKey[]      // üí∞ Îç∞Ïä§ÌÅ¨ÌÜ± ÎùºÏù¥ÏÑ†Ïä§ ÌÇ§
  
  @@index([email])
  @@index([provider, providerId])
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  ipAddress   String?
  userAgent   String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  teamId      String?
  isPublic    Boolean  @default(false)
  thumbnail   String?
  lastAnalyzedAt DateTime?
  metadata    Json?    // Store analysis results, file structure, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  team        Team?    @relation(fields: [teamId], references: [id])
  analyses    Analysis[]
  shares      ProjectShare[]
  
  @@index([userId])
  @@index([teamId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members     TeamMember[]
  projects    Project[]
  subscription Subscription?
  
  @@index([slug])
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("member") // owner, admin, member
  joinedAt  DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Analysis {
  id          String   @id @default(cuid())
  projectId   String
  version     String?
  status      String   @default("pending") // pending, processing, completed, failed
  fileCount   Int      @default(0)
  totalSize   BigInt   @default(0)
  duration    Int?     // milliseconds
  results     Json?    // Store complete analysis results
  errors      Json?
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([status])
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String?            @unique
  teamId            String?            @unique
  plan              SubscriptionPlan   @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  stripePriceId     String?
  gumroadSaleId     String?            @unique  // üí∞ Gumroad ÌåêÎß§ ID
  gumroadSubscriptionId String?        @unique  // üí∞ Gumroad Íµ¨ÎèÖ ID
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  canceledAt        DateTime?
  lastPaymentAt     DateTime?
  trialEnd          DateTime?
  metadata          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  user              User?             @relation(fields: [userId], references: [id])
  team              Team?             @relation(fields: [teamId], references: [id])
  invoices          Invoice[]
  usage             Usage[]
  licenseKeys       LicenseKey[]      // üí∞ Îç∞Ïä§ÌÅ¨ÌÜ± ÎùºÏù¥ÏÑ†Ïä§ ÌÇ§
  
  @@index([stripeCustomerId])
  @@index([gumroadSaleId])
  @@index([status])
}

model Invoice {
  id               String   @id @default(cuid())
  subscriptionId   String
  stripeInvoiceId  String   @unique
  amount           Int      // cents
  currency         String   @default("usd")
  status           String   // draft, open, paid, void, uncollectible
  paidAt           DateTime?
  hostedInvoiceUrl String?
  pdfUrl           String?
  createdAt        DateTime @default(now())
  
  subscription     Subscription @relation(fields: [subscriptionId], references: [id])
  
  @@index([subscriptionId])
  @@index([stripeInvoiceId])
}

model Usage {
  id             String   @id @default(cuid())
  subscriptionId String
  metric         String   // projects_analyzed, storage_gb, api_calls
  quantity       Int
  timestamp      DateTime @default(now())
  
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  
  @@index([subscriptionId, metric])
  @@index([timestamp])
}

model ProjectShare {
  id          String   @id @default(cuid())
  projectId   String
  token       String   @unique
  expiresAt   DateTime?
  password    String?
  maxViews    Int?
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([projectId])
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  key         String   @unique
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  scopes      String[] // read:projects, write:projects, etc.
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([key])
  @@index([userId])
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // login, logout, project_created, etc.
  resourceType String? // project, team, subscription
  resourceId  String?
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        String   // email, in_app, push
  title       String
  message     String
  metadata    Json?
  read        Boolean  @default(false)
  readAt      DateTime?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId, read])
  @@index([createdAt])
}

// üí∞ Îç∞Ïä§ÌÅ¨ÌÜ± ÎùºÏù¥ÏÑ†Ïä§ ÌÇ§ Î™®Îç∏ (EXE Ïï±Ïö©)
model LicenseKey {
  id             String   @id @default(cuid())
  key            String   @unique  // WV2024-XXXXX-XXXXX-XXXXX-XXXXX
  userId         String
  subscriptionId String
  planType       SubscriptionPlan
  status         String   @default("active") // active, inactive, suspended
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  user           User         @relation(fields: [userId], references: [id])
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  devices        Device[]
  
  @@index([key])
  @@index([userId])
  @@index([status])
}

// üí∞ ÎîîÎ∞îÏù¥Ïä§ Í¥ÄÎ¶¨ Î™®Îç∏ (Î©ÄÌã∞ ÎîîÎ∞îÏù¥Ïä§ ÏßÄÏõê)
model Device {
  id            String   @id @default(cuid())
  licenseKeyId  String
  fingerprint   String   // ÌïòÎìúÏõ®Ïñ¥ Í∏∞Î∞ò Í≥†Ïú† ÏãùÎ≥ÑÏûê
  platform      String   // win32, darwin, linux
  deviceName    String?  // ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÎîîÎ∞îÏù¥Ïä§ Ïù¥Î¶Ñ
  appVersion    String?
  isActive      Boolean  @default(true)
  registeredAt  DateTime @default(now())
  lastActiveAt  DateTime @default(now())
  
  licenseKey    LicenseKey @relation(fields: [licenseKeyId], references: [id], onDelete: Cascade)
  
  @@unique([licenseKeyId, fingerprint])
  @@index([fingerprint])
  @@index([licenseKeyId])
  @@index([lastActiveAt])
}